import numpy as np
from CON2020 import CON2020

# --------------------------------------------- 
#       JRM33 model + CON2020 current sheet 
# ---------------------------------------------
#
#   Internal field : Connerney et al.2022, DOI : 10.1029/2021JE007055  
#   External field : Connerney et al.2020, DOI : 10.1029/2020JA028138
#
#
# -----------------------------------------------


def GetJupiterMag(x1, x2, x3, xyz_in, Bxyz_Out, CAN):
    # Code to calculate the JRM33_ORDER13 model of Jupiter's internal magnetic field model
    # with Degree 13 and Order 13.
    # Reference: Connerney et al. (2022),  https://doi.org/10.1029/2021JE007055
    #
    # Required inputs :
    #   - x1 | x [Rj] or r [Rj]  (S3RH)
    #   - x2 | y [Rj] or t [deg] (S3RH)
    #   - x3 | z [Rj] or p [deg] (S3RH)
    #   - xyz_in | True :  input coordinates are x,y,z 
    #            | False : input coordinates are r,t,p 
    #
    #   - Bxyz_Out | True :  output B are Bx,By,Bz [nT] (S3RH)
    #              | False : output B are Br, Bt, Bp [nT] (S3RH)
    #
    #   - CAN | True : include CON2020 external field 
    #         | False : do not include CON2020 external field 
    #
    # Outputs:
    #   - Bx,By,Bz,|B| [nT] or Br, Bt, Bp, |B| [nT]
    #
    #
    #
    # This code was originally written by Marissa Vogt (mvogt@bu.edu) and Rob Wilson (rob.wilson@lasp.colorado.edu).
    # It is based on a routine originally written by K. Khurana, translated into IDL by Marissa Vogt in 2009.
    # Citation Info:
    #  DOI: 10.5281/zenodo.6814109     This DOI links to all versions of code at the Github.
    #  Github: https://github.com/rjwilson-LASP/PSH
    #
    # Adapted by Jonas RABIA (IRAP-CNRS) in 2022, contact : jonas.rabia@irap.omp.eu
    #
    # ----------------------------------------------------------------------------

    if xyz_in == True : 
        x_in = np.array(x1)   # X in S3RH, units Rj
        y_in = np.array(x2)   # Y in S3RH, units Rj
        z_in = np.array(x3)   # Z in S3RH, units Rj
    
        
        r_rj = np.sqrt(x_in *x_in + y_in *y_in + z_in *z_in)
        colat_rads = np.arccos(z_in /r_rj)
        elong_rads = np.arctan2(y_in,x_in)
        
    if xyz_in == False : 
        
        r_rj = np.array(x1)
        colat_rads = np.array(np.radians(x2))
        elong_rads = np.array(np.radians(x3))
        
    N_input = len(x1)
    
    
    # ######################################################################
    # Start of RTP code.
    # ######################################################################
    
    # Code is not using input names (so as not to alter inputs, an IDL issue)
    r_rj_dbl       =  r_rj
    colat_rads_dbl = colat_rads
    elong_rads_dbl = elong_rads
    
    # ============
    # Begin hard-coding for JRM33_ORDER13
    # Values from Connerney et al. (2021),  https://doi.org/10.1029/2021JE007055
    # See supplemental online information, file 2021JE007055-sup-0002-Supporting Information SI-S02.mod
    # ============
    
    # order = 13; # degree = order for this code 
    # k     = order + 1
    # k     = 14  # order + 1 
    k_plus1 = 15  # k+1, used in for loops when I want to go up to k 

    
    rec = np.array([0                         , \
                    0                         ,             0.33333333333333331482962 ,             0                         ,             0.26666666666666666296592 , \
                    0.20000000000000001110223 ,             0                         ,             0.25714285714285711748062 ,             0.22857142857142856429142 , \
                    0.14285714285714284921269 ,             0                         ,             0.25396825396825395415590 ,             0.23809523809523808202115 , \
                    0.19047619047619046561692 ,             0.11111111111111110494321 ,             0                         ,             0.25252525252525254151337 , \
                    0.24242424242424243097105 ,             0.21212121212121212709967 ,             0.16161616161616162989922 ,             0.09090909090909091161414 , \
                    0                         ,             0.25174825174825177231952 ,             0.24475524475524476630817 ,             0.22377622377622377602968 , \
                    0.18881118881118880148406 ,             0.13986013986013987042689 ,             0.07692307692307692734701 ,             0                         , \
                    0.25128205128205127749652 ,             0.24615384615384616751044 ,             0.23076923076923078204103 ,             0.20512820512820512108831 , \
                    0.16923076923076924016343 ,             0.12307692307692308375522 ,             0.06666666666666666574148 ,             0                         , \
                    0.25098039215686274161499 ,             0.24705882352941177515504 ,             0.23529411764705882026405 ,             0.21568627450980393245317 , \
                    0.18823529411764705621124 ,             0.15294117647058824704942 ,             0.10980392156862744945656 ,             0.05882352941176470506601 , \
                    0                         ,             0.25077399380804954454049 ,             0.24767801857585139413409 ,             0.23839009287925697067045 , \
                    0.22291021671826624639401 ,             0.20123839009287924906033 ,             0.17337461300309597866942 ,             0.13931888544891640746570 , \
                    0.09907120743034056320475 ,             0.05263157894736841813099 ,             0                         ,             0.25062656641604008633806 , \
                    0.24812030075187968547468 ,             0.24060150375939848288454 ,             0.22807017543859647856763 ,             0.21052631578947367252397 , \
                    0.18796992481203006475354 ,             0.16040100250626565525636 ,             0.12781954887218044403241 ,             0.09022556390977443108170 , \
                    0.04761904761904761640423 ,             0                         ,             0.25051759834368531043580 ,             0.24844720496894409644817 , \
                    0.24223602484472050999642 ,             0.23188405797101449556941 ,             0.21739130434782608092270 ,             0.19875776397515526605630 , \
                    0.17598343685300207872579 ,             0.14906832298136646342002 ,             0.11801242236024844789455 ,             0.08281573498964803214939 , \
                    0.04347826086956521618454 ,             0                         ,             0.25043478260869567186830 ,             0.24869565217391303990624 , \
                    0.24347826086956522728677 ,             0.23478260869565217849875 ,             0.22260869565217392129775 ,             0.20695652173913042792819 , \
                    0.18782608695652172614565 ,             0.16521739130434781595014 ,             0.13913043478260869734164 ,             0.10956521739130434256460 , \
                    0.07652173913043477937457 ,             0.04000000000000000083267 ,             0                         ,             0.25037037037037035425158 , \
                    0.24888888888888888173412 ,             0.24444444444444443642617 ,             0.23703703703703704608330 ,             0.22666666666666665519436 , \
                    0.21333333333333334702608 ,             0.19703703703703703831174 ,             0.17777777777777778456247 ,             0.15555555555555555802272 , \
                    0.13037037037037035869247 ,             0.10222222222222222820509 ,             0.07111111111111111104943 ,             0.03703703703703703498107 , \
                    0                         ], dtype='float64')
    
    # This is the modified g array, not the original g coefficients, and will be further modified.
    g = np.array([  0                         , \
                    0                         ,        410993.40000000002328306436539 ,        -71305.89999999999417923390865 ,         17695.05000000000291038304567 , \
               -98679.09142913710093125700951 ,         41785.89893767991452477872372 ,          6998.25000000000000000000000 ,       -114784.31409169112157542258501 , \
                29815.77499244317732518538833 ,         -1177.79031452971298676857259 ,       -150508.75000000000000000000000 ,        -44719.03330350511532742530107 , \
                -9549.96682340441475389525294 ,        -22690.84741462402962497435510 ,        -13251.35315516754053533077240 ,       -143842.38750000001164153218269 , \
                42921.27286392349196830764413 ,        127570.69442965975031256675720 ,        -81633.02337143303884658962488 ,         -5645.04937803636312310118228 , \
                -3499.17460275232133426470682 ,       -302725.50000000000000000000000 ,        186906.53619596210774034261703 ,        182206.05752274760743603110313 , \
              -125020.45832024884293787181377 ,         14963.80719322771983570419252 ,          3624.24518831162868082174100 ,          5385.77113291791010851738974 , \
                 1606.06874999999990905052982 ,        190333.43941625900333747267723 ,       -205607.27056667389115318655968 ,        -31401.55576882112654857337475 , \
               -87130.35157315820106305181980 ,         18897.56891766996704973280430 ,         -6026.22614284811970719601959 ,          2395.37925024410378682659939 , \
               545441.66015625000000000000000 ,         88735.96875000000000000000000 ,       -389895.83466339309234172105789 ,         -3934.85946617597619479056448 , \
              -126906.14003801737271714955568 ,        -19304.97414549050154164433479 ,        -29414.75344365271303104236722 ,         -3601.55780058668460696935654 , \
                -1895.53694641443667023850139 ,        846519.78125000000000000000000 ,       -446765.73728798632510006427765 ,         31302.07698931798586272634566 , \
                64195.52501902574294945225120 ,        202541.11524796698358841240406 ,       -106827.25692624624934978783131 ,         24466.70976716701261466369033 , \
               -11500.67915122823251294903457 ,          3393.53795505362222684198059 ,         -1409.70572312946706006187014 ,       -454041.47851562500000000000000 , \
               458156.33419361733831465244293 ,        597543.35517407325096428394318 ,        703995.08215286664199084043503 ,        441386.13744140026392415165901 , \
                56501.09635237817565212026238 ,         87280.41578810986538883298635 ,         14527.30073426677881798241287 ,         20426.21477027422588435001671 , \
                 2230.28467025431518777622841 ,           700.12476547087453582207672 ,        451779.59531249996507540345192 ,       1425696.72961616632528603076935 , \
              -842884.25393627304583787918091 ,       1164319.22554796561598777770996 ,        141241.38706735140294767916203 ,         30860.91705950191681040450931 , \
              -101016.46548193244962021708488 ,        -25878.59093201200448675081134 ,         15597.45408843598124803975224 ,          3086.98667892851653959951364 , \
                 -888.46463288199674934730865 ,           631.48165122007844729523640 ,       1518777.06982421875000000000000 ,       1514541.16614053281955420970917 , \
              -231939.38036545089562423527241 ,        313703.49667393940035253763199 ,       -283336.19316209433600306510925 ,       -273363.07484114210819825530052 , \
              -228212.28592688051867298781872 ,       -232679.70717926806537434458733 ,         28356.30298026848322479054332 ,        -37627.76339165167155442759395 , \
                -6286.74167907329319859854877 ,         -2101.13289573513384311809205 ,          -125.36317707760989037524268 ,        954107.77587890625000000000000 , \
              -789653.82299604720901697874069 ,       1795741.50312742590904235839844 ,      -2961219.63433324638754129409790 ,        -75875.64023424909100867807865 , \
               -11760.33511734100466128438711 ,        268579.05760751606430858373642 ,       -253967.82629875544807873666286 ,        148831.17948716515093110501766 , \
               -43689.24707565712742507457733 ,          1180.95746522386184551578481 ,         -2299.43438245620791349210776 ,          -114.40525444356161699488439 , \
                 -160.23044573031521053962933 ], dtype='float64')
    
    # This is the modified h array, not the original h coefficients, and will be further modified.
    h = np.array([  0                         , \
                    0                         ,             0                         ,         20958.40000000000145519152284 ,             0                         , \
               -73697.02981124815414659678936 ,         17512.33270262702353647910058 ,             0                         ,       -100706.48416748049203306436539 , \
                82336.52755369272199459373951 ,        -21659.78366249880491523072124 ,             0                         ,        179591.12419298454187810420990 , \
               107370.50591299502411857247353 ,         -1048.75334326046368005336262 ,          -979.92466507316260049265111 ,             0                         , \
               461187.64343489689053967595100 ,         -6349.52304212686522078001872 ,         28240.09962311459821648895741 ,         23447.19900435869931243360043 , \
                 7079.80040974297844513785094 ,             0                         ,        264963.20919183432124555110931 ,       -151222.18075837698415853083134 , \
                -2938.03606418524441323825158 ,         76113.94933750208292622119188 ,         -8578.72983101319005072582513 ,          3212.77617244015573305659927 , \
                    0                         ,       -271512.72097865847172215580940 ,       -330112.68882052105618640780449 ,         44458.57413206643104786053300 , \
                65469.09192571333551313728094 ,        -40863.22971117807901464402676 ,         -4683.32440422766285337274894 ,         -3755.98417943188178469426930 , \
                    0                         ,       -153997.59375000000000000000000 ,       -719733.06207425787579268217087 ,        415007.55691891378955915570259 , \
               -46136.02057253671227954328060 ,         35402.09248114033107412979007 ,        -22223.42771144288417417556047 ,          2271.43559762761515230522491 , \
                -1991.86175917113155264814850 ,             0                         ,      -1006436.42691994667984545230865 ,       -144319.85027737272321246564388 , \
               544906.81881777732633054256439 ,        -71895.97914541495265439152718 ,        121863.52687899750890210270882 ,         -3389.11687594690647529205307 , \
                14767.96891140620027726981789 ,          2472.60829147248250592383556 ,          1115.59577164790675851691049 ,             0                         , \
             -1384249.10274789924733340740204 ,       1173617.20366917247883975505829 ,       -420076.51331166969612240791321 ,       -209806.54908645161776803433895 , \
               -16098.82101720037644554395229 ,        -25961.40947766388489981181920 ,        -32461.94297629480570321902633 ,          3719.80820997743148836889304 , \
                -2230.01919177910349390003830 ,           938.76318815977697340713348 ,             0                         ,        256092.79800851742038503289223 , \
              1852005.60425209673121571540833 ,      -1385008.89819696894846856594086 ,       -661513.62886436795815825462341 ,        -75409.63306120591005310416222 , \
              -255472.92826251508085988461971 ,        -66926.19299495992891024798155 ,        -37531.30277518012007931247354 ,        -12971.16190189409462618641555 , \
                -1585.96105624679739776183851 ,          -289.87374107255254784831777 ,             0                         ,       3771282.85399669967591762542725 , \
              1771549.32963395491242408752441 ,      -1234233.68693465669639408588409 ,       -618967.12278338952455669641495 ,        358538.51971466519171372056007 , \
              -231607.55816182776470668613911 ,        102176.33383478372707031667233 ,        -49039.72397764078777981922030 ,        -11821.41667073273674759548157 , \
                 -207.51435399791816394099442 ,           306.79766798991960286002723 ,          -404.64826224281051736397785 ,             0                         , \
              7138027.63398880977183580398560 ,        -68090.85327267039974685758352 ,       -584339.81344802852254360914230 ,       2126289.34228428779169917106628 , \
               177727.19461354395025409758091 ,        499002.54970085067907348275185 ,        324358.61438092868775129318237 ,         28001.33771220673952484503388 , \
               -14138.76070055155105364974588 ,         33944.01060500412131659686565 ,          4741.39154200049142673378810 ,          2048.50698775369892246089876 , \
                   28.56088209160934354713390 ], dtype='float64')
    
    # ============
    # End parts that are hard-coded for JRM33_ORDER13
    # ============
    

    a         = np.zeros((N_input,k_plus1),dtype='float64')
    DINDGEN_k = a.copy()
    for i in range(k_plus1):
        DINDGEN_k[:,i] = i
    
    da = np.float64(1)/r_rj_dbl
    
    
    a[:,0] = da
    for i in range(1,k_plus1):
        a[:,i] = a[:,i-1]*da
    
    b = a  * DINDGEN_k
    
    cos_phi   = np.cos(elong_rads_dbl,dtype='float64')
    sin_phi   = np.sin(elong_rads_dbl,dtype='float64')
    cos_theta = np.cos(colat_rads_dbl,dtype='float64')
    sin_theta = np.sin(colat_rads_dbl,dtype='float64')
    #not_bk = (sin_theta >= 0.00001 )  # = 1d-5 - also see bk both times below

    bk = (sin_theta <  0.00001 )
    zero_array = np.zeros(N_input,dtype='float64')
    p   = zero_array + np.float64(1)
    d   = zero_array.copy()
    bbr = zero_array.copy()
    bbt = zero_array.copy()
    bbf = zero_array.copy()
    x = zero_array.copy()
    y = p.copy() # 1s
    
    for m in range(1, k_plus1):
        bm  = (m != 1)
        if bm:
            m_minus_1 = np.float64(m - 1)
            w = x.copy()
            x = w *cos_phi + y *sin_phi
            y = y *cos_phi - w *sin_phi
        q = p.copy()
        z = d.copy()
        bi = zero_array.copy()
        p2 = zero_array.copy()
        d2 = zero_array.copy()
        for n in range(m, k_plus1):
            mn = int( n*(n-1)/2 + m )
            w  = g[mn]*y + h[mn]*x
            bbr += b[:,n]*w*q
            bbt -= a[:,n]*w*z
            if bm:
                qq = q.copy()
                ind = np.where(bk)[0]
                if (len(ind) != 0):
                    qq[ind] = z[ind]
                bi += a[:,n] * (g[mn]*x-h[mn]*y) * qq
            xk = rec[mn] # faster to write this to xk, to use below twice
            dp = cos_theta *z - sin_theta *q - d2*xk
            pm = cos_theta *q                - p2*xk
            d2 = z.copy()
            p2 = q.copy()
            z = dp.copy()
            q = pm.copy()
        d = sin_theta *d + cos_theta *p
        p = sin_theta *p
        if bm:
            bi  *= m_minus_1
            bbf += bi
    

    bf = bbf.copy() # set size of array and do the 3rd case
    ind = np.where((bk == 1) & (cos_theta < 0))[0]
    if (len(ind) != 0):
        bf[ind] = -bbf[ind]
    ind = np.where(bk == 0)[0]
    if (len(ind) != 0):
        bf[ind] =  bbf[ind]/sin_theta[ind]
            
            

# ------------------------------------------------------------
#               Add current sheet model (CON2020)    
# -------------------------------------------------------------
    if CAN == True :
        
        r_in = r_rj
        theta_in = colat_rads * 180/np.pi
        phi_in = elong_rads * 180/np.pi        
        
        B_con_rtp = np.zeros((N_input,3))
        B_con = list(map(CON2020,r_in, theta_in, phi_in))

        for i in range(N_input):
            B_con_rtp[i][0]=B_con[i][0]
            B_con_rtp[i][1]=B_con[i][1]
            B_con_rtp[i][2]=B_con[i][2]


        bbr += B_con_rtp[:,0]
        bbt += B_con_rtp[:,1]
        bf += B_con_rtp[:,2]
            

# ------------------------------
#           Output 
# ------------------------------
    ans = np.zeros((N_input,4))

    if Bxyz_Out == False : 

        Br=bbr
        Bt=bbt 
        Bp=bf
        B = np.sqrt(Br**2 + Bt**2 + Bp**2)
        
        ans[:,0]=Br
        ans[:,1]=Bt
        ans[:,2]=Bp
        ans[:,3]=B
        return ans 
    
    
    if Bxyz_Out == True :
        # Convert to cartesian coordinates
        # Each line is one component, Bx, By then Bz
        Bxyz = np.array([ \
            bbr *sin_theta *cos_phi + bbt *cos_theta *cos_phi - bf *sin_phi , \
            bbr *sin_theta *sin_phi + bbt *cos_theta *sin_phi + bf *cos_phi , \
            bbr *cos_theta          - bbt *sin_theta                          \
            ]) # size 3 x n, or just size 3 if scalar
        
            
        B=np.sqrt(Bxyz[0]**2+Bxyz[1]**2+Bxyz[2]**2)
        ans[:,0]=Bxyz[0]
        ans[:,1]=Bxyz[1]
        ans[:,2]=Bxyz[2]
        ans[:,3]=B

        return ans

